#!/usr/bin/env python3
import argparse

def calculate_expected_patch(level, is_plus, detail_ratio, threshold=0.8499, divisor=13.0039):
    """
    PATCH 계산 공식 구현
    level: 레벨
    is_plus: 플러스 여부 (0 또는 1)
    detail_ratio: 세부비율 퍼센트값 (소수점으로 표현)
    threshold: 세부비율 조정을 위한 기준값 (기본값: 0.8499)
    divisor: 세부비율 조정을 위한 나누는 값 (기본값: 13.0039)
    """
    # 플러스 여부에 따른 승수 결정
    plus_multiplier = 1.02 if is_plus else 1.0
    
    # 기본 계산
    base_value = level * 4.2 * plus_multiplier
    
    # 세부비율 조정
    ratio_adjustment = (detail_ratio - threshold) / divisor
    
    # 0~1 사이로 제한
    if ratio_adjustment < 0:
        ratio_adjustment = 0
    elif ratio_adjustment > 1:
        ratio_adjustment = 1
        
    return base_value * ratio_adjustment * 100

def find_mislabeled_data(threshold=0.8499, divisor=13.0053, tolerance=0.01):
    # 실제 데이터 - (레벨, PLUS 여부, 세부비율, 실제 PATCH)
    real_data = [
        (19, 0, 895/917, 77.38),
        (22, 0, 1003/1032, 86.68),
        (21, 0, 862/889, 81.20),
        (19, 0, 961/985, 77.15),
        (19, 0, 975/1037, 55.42),
        (19, 0, 967/1037, 50.68),
        (22, 0, 855/898, 72.63),
        (24, 0, 1106/1175, 70.83),
        (20, 0, 832/855, 79.58),
        (21, 0, 981/1025, 72.69),
        (27, 0, 1324/1365, 104.7),
        (26, 0, 1429/1579, 46.27),
        (24, 0, 1379/1429, 89.22),
        (16, 0, 683/752, 30.15),
        (21, 0, 994/1025, 81.29),
        (23, 0, 1185/1267, 63.42),
        (23, 0, 1293/1345, 82.78),
        (21, 0, 947/995, 69.08),
        (26, 0, 1499/1579, 83.50),
        (27, 0, 1333/1479, 44.81),
        (22, 0, 1053/1086, 85.06),
        (24, 0, 1210/1282, 72.81),
        (26, 0, 1427/1500, 85.17),
        (20, 0, 1035/1077, 71.76),
        (19, 0, 910/1051, 9.78),
        (24, 0, 1124/1200, 67.25),
        (21, 0, 879/1025, 5.19),
        (27, 0, 1469/1581, 69.11),
        (8,  0, 338/378, 11.44),
        (26, 0, 1063/1143, 67.27),
        (3,  0, 142/154, 6.99),
        (21, 0, 893/1025, 14.46),
        (21, 0, 991/1025, 79.3),
        (23, 0, 1400/1500, 61.97),
        (26, 0, 1071/1143, 73.14),
        (19, 0, 920/945, 75.87),
        (25, 0, 1099/1208, 48.34),
        (24, 0, 1098/1175, 65.55),
        (28, 0, 1471/1551, 89.09),
        (26, 0, 1576/1609, 108.82),
        (19, 0, 748/827, 33.49),
        (6,  0, 238/271, 5.49),
        (20, 0, 853/888, 71.49),
        (23, 0, 1181/1213, 91.9),
        (20, 0, 1078/1102, 82.88),
        (27, 0, 1310/1365, 95.75),
        (23, 0, 1322/1374, 83.38),
        (24, 0, 1129/1175, 86.0),
        (19, 0, 968/1014, 64.27),
        (24, 0, 1437/1521, 73.54),
        (28, 0, 1493/1524, 117.34),
        (28, 0, 1681/1786, 82.57),
        (26, 0, 1447/1492, 100.71),
        (27, 0, 1310/1365, 95.75),
        (26, 0, 1299/1339, 100.95),
        (25, 0, 1155/1189, 98.1),
        (27, 0, 1437/1491, 99.31),
        (18, 0, 808/852, 57.23),
        (28, 0, 1453/1524, 93.61),
        (21, 0, 954/1016, 60.41),
        (26, 0, 1067/1143, 70.21),
        (28, 0, 1292/1323, 114.55),
        (19, 0, 876/929, 57.1),
        (26, 0, 1455/1568, 65.52),
        (27, 0, 1314/1365, 98.31),
        (26, 0, 1113/1143, 104.0),
        (19, 0, 916/1014, 32.8),
        (27, 0, 1517/1581, 95.59),
        (26, 0, 1567/1609, 104.12),
        (26, 0, 1552/1620, 90.79),
        (24, 0, 1246/1282, 94.58),
        (22, 0, 793/898, 23.57),
        (21, 0, 927/1025, 36.95),
        (27, 0, 1270/1365, 70.2),
        (24, 0, 1396/1429, 98.44),
        (27, 0, 1312/1365, 97.03),
        (20, 0, 836/858, 80.39),
        (22, 0, 1067/1109, 79.74),
        (27, 0, 1270/1365, 70.2),
        (20, 0, 1042/1080, 74.23),
        (26, 0, 1116/1143, 106.2),
        (25, 0, 1518/1618, 71.29),
        (18, 0, 831/852, 72.93),
        (27, 0, 1433/1479, 103.77),
        (27, 0, 1549/1581, 113.24),
        (21, 0, 896/998, 32.48),
        (21, 0, 943/995, 66.35),
        (21, 0, 987/1025, 76.66),
        (20, 0, 826/888, 51.85),
        (21, 0, 1043/1103, 64.91),
        (20, 0, 828/858, 74.37),
        (26, 0, 1400/1492, 74.26),
        (27, 0, 1254/1365, 59.98),
        (26, 0, 1222/1339, 52.67),
        (22, 0, 1040/1080, 80.33),
        (23, 0, 1022/1144, 32.28),
        (26, 0, 1051/1143, 58.45),
        (27, 0, 1350/1479, 54.83),
        (19, 0, 928/970, 65.53),
        (19, 0, 886/929, 63.7),
        (20, 0, 1038/1082, 70.69),
        (20, 0, 839/888, 61.31),
        (25, 0, 1158/1208, 87.77),
        (17, 0, 820/937, 13.85),
        (20, 0, 1024/1120, 41.59),
        (23, 0, 839/867, 87.51),
        (22, 0, 1059/1086, 88.98),
        (21, 0, 879/1025, 5.19),
        (26, 0, 1515/1579, 92.0),
        (22, 1, 833/871, 77.16),
        (22, 1, 864/947, 45.26),
        (18, 1, 849/878, 69.42),
        (21, 1, 1148/1255, 44.85),
        (25, 1, 1218/1322, 58.83),
        (10, 1, 433/486, 13.52),
        (22, 1, 909/1010, 36.31),
        (27, 1, 1407/1444, 110.71),
        (24, 0, 1113/1200, 60.15),
        (21, 1, 974/1015, 75.89),
        (27, 0, 1430/1479, 102),
        (20, 0, 853/888, 71.49),
        (20, 1, 980/1003, 83.78),
        (19, 1, 825/880, 54.83),
        (23, 0, 1181/1213, 91.9),
        (27, 0, 1482/1581, 76.28),
        (26, 0, 1517/1568, 98.73),
        (26, 0, 1386/1568, 28.57),
        (27, 1, 1569/1652, 88.82),
        (21, 0, 1043/1103, 64.91),
        (28, 1, 1170/1226, 96.32)
    ]
    
    # 의심되는 데이터 저장할 리스트
    suspicious_data = []
    
    # 각 데이터에 대해 검증
    for i, (level, is_plus, detail_ratio, actual_patch) in enumerate(real_data):
        # 예상되는 PATCH 값 계산
        expected_patch = calculate_expected_patch(level, is_plus, detail_ratio, threshold, divisor)
        
        # 실제값과 예상값 차이 계산
        difference = abs(actual_patch - expected_patch)
        
        # 차이가 허용 범위를 넘으면 의심 데이터로 추가
        if difference > tolerance:
            suspicious_data.append({
                "INDEX": i,
                "LEVEL": level,
                "DIFF": "PLUS" if is_plus else "OVER",
                "DETAIL_RATIO": f"{detail_ratio:.4f}",
                "ACTUAL_PATCH": f"{actual_patch:.3f}",
                "EXPECTED_PATCH": f"{expected_patch:.3f}",
                "DIFFERENCE": f"{difference:.3f}"
            })
    
    return suspicious_data

def main():
    # 명령행 인자 파싱
    parser = argparse.ArgumentParser(description='데이터 라벨링 검증 도구')
    parser.add_argument('--threshold', type=float, default=0.8499, help='세부비율 조정을 위한 기준값 (기본값: 0.8499)')
    parser.add_argument('--divisor', type=float, default=13.0053, help='세부비율 조정을 위한 나누는 값 (기본값: 13.0053)')
    parser.add_argument('--tolerance', type=float, default=0.01, help='허용 오차 범위 (기본값: 0.01)')
    args = parser.parse_args()
    
    suspicious_data = find_mislabeled_data(args.threshold, args.divisor, args.tolerance)
    
    print(f"사용된 threshold: {args.threshold}, divisor: {args.divisor}, tolerance: {args.tolerance}")
    print(f"의심되는 데이터 {len(suspicious_data)}개 발견:")
    print("-" * 80)
    print(f"{'INDEX':^8} | {'LEVEL':^6} | {'DIFF':^6} | {'DETAIL_RATIO':^12} | {'ACTUAL_PATCH':^14} | {'EXPECTED_PATCH':^14} | {'DIFFERENCE':^12}")
    print("-" * 80)
    
    for data in suspicious_data:
        print(f"{data['INDEX']:^8} | {data['LEVEL']:^6} | {data['DIFF']:^6} | {data['DETAIL_RATIO']:^12} | {data['ACTUAL_PATCH']:^14} | {data['EXPECTED_PATCH']:^14} | {data['DIFFERENCE']:^12}")

if __name__ == "__main__":
    main() 